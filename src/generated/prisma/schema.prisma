generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Business {
  id                  String               @id @default(cuid())
  name                String
  type                BusinessType
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  address             String?
  phone               String?
  email               String               @unique
  settings            Json?
  appointments        Appointment[]
  businessHours       BusinessHours[]
  clientRelationships ClientRelationship[]
  clients             Client[]
  categories          ServiceCategory[]
  services            Service[]
  staff               Staff[]

  @@map("businesses")
}

model Staff {
  id                 String               @id @default(cuid())
  email              String               @unique
  name               String
  role               StaffRole
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  businessId         String
  appointments       Appointment[]
  relationshipNotes  RelationshipNote[]
  schedules          Schedule[]
  business           Business             @relation(fields: [businessId], references: [id])
  preferredByClients ClientRelationship[] @relation("ClientRelationshipToStaff")
  services           Service[]            @relation("ServiceToStaff")

  @@map("staff")
}

model ServiceCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  color       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id])
  services    Service[]

  @@map("service_categories")
}

model Client {
  id            String               @id @default(cuid())
  name          String
  phone         String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  businessId    String
  appointments  Appointment[]
  relationship  ClientRelationship?
  sensitiveInfo ClientSensitiveInfo?
  business      Business             @relation(fields: [businessId], references: [id])

  @@map("clients")
}

model ClientSensitiveInfo {
  id               String    @id @default(cuid())
  email            String
  notes            String?
  medicalInfo      String?
  documents        Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  clientId         String    @unique
  encryptionStatus Boolean   @default(false)
  lastAccessedAt   DateTime?
  accessLog        Json?
  client           Client    @relation(fields: [clientId], references: [id])

  @@map("client_sensitive_info")
}

model Service {
  id           String           @id @default(cuid())
  name         String
  description  String?
  duration     Int
  price        Decimal
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  businessId   String
  categoryId   String?
  appointments Appointment[]
  business     Business         @relation(fields: [businessId], references: [id])
  category     ServiceCategory? @relation(fields: [categoryId], references: [id])
  providers    Staff[]          @relation("ServiceToStaff")

  @@map("services")
}

model Appointment {
  id         String            @id @default(cuid())
  startTime  DateTime
  endTime    DateTime
  status     AppointmentStatus
  notes      String?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  businessId String
  clientId   String
  serviceId  String
  staffId    String
  business   Business          @relation(fields: [businessId], references: [id])
  client     Client            @relation(fields: [clientId], references: [id])
  service    Service           @relation(fields: [serviceId], references: [id])
  staff      Staff             @relation(fields: [staffId], references: [id])
  payment    Payment?

  @@map("appointments")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Decimal
  status        PaymentStatus
  paymentMethod PaymentMethod
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  appointmentId String        @unique
  appointment   Appointment   @relation(fields: [appointmentId], references: [id])

  @@map("payments")
}

model Schedule {
  id        String @id @default(cuid())
  dayOfWeek Int
  startTime String
  endTime   String
  staffId   String
  staff     Staff  @relation(fields: [staffId], references: [id])

  @@map("schedules")
}

model BusinessHours {
  id         String   @id @default(cuid())
  dayOfWeek  Int
  startTime  String
  endTime    String
  isClosed   Boolean  @default(false)
  businessId String
  business   Business @relation(fields: [businessId], references: [id])

  @@map("business_hours")
}

model ClientRelationship {
  id                    String             @id @default(cuid())
  clientId              String             @unique
  businessId            String
  status                ClientStatus       @default(ACTIVE)
  relationshipStartDate DateTime           @default(now())
  lastVisit             DateTime?
  visitFrequency        Int?
  lifetimeValue         Decimal?
  preferences           Json?
  internalNotes         String?
  flags                 ClientFlag[]
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  business              Business           @relation(fields: [businessId], references: [id])
  client                Client             @relation(fields: [clientId], references: [id])
  noteHistory           RelationshipNote[]
  visitHistory          VisitHistory[]
  preferredStaff        Staff[]            @relation("ClientRelationshipToStaff")

  @@map("client_relationships")
}

model VisitHistory {
  id                 String             @id @default(cuid())
  relationshipId     String
  visitDate          DateTime
  serviceType        String
  staffNotes         String?
  clientFeedback     String?
  followUpRequired   Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  clientRelationship ClientRelationship @relation(fields: [relationshipId], references: [id])

  @@map("visit_history")
}

model RelationshipNote {
  id                 String             @id @default(cuid())
  relationshipId     String
  noteType           NoteType
  content            String
  createdById        String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  createdBy          Staff              @relation(fields: [createdById], references: [id])
  clientRelationship ClientRelationship @relation(fields: [relationshipId], references: [id])

  @@map("relationship_notes")
}

enum BusinessType {
  HAIR_SALON
  BARBERSHOP
  NAIL_SALON
  PHYSIOTHERAPY
  PSYCHOLOGY
  OTHER
}

enum StaffRole {
  OWNER
  ADMIN
  PROVIDER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  TRANSFER
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  VIP
  BLOCKED
  POTENTIAL
}

enum NoteType {
  GENERAL
  PREFERENCE
  INCIDENT
  FEEDBACK
  FOLLOW_UP
  SPECIAL_REQUEST
}

enum ClientFlag {
  ALLERGIES
  MEDICAL_CONDITION
  PAYMENT_ISSUES
  SPECIAL_CARE
  VIP_TREATMENT
  CANCELLED_FREQUENTLY
  RESCHEDULE_FREQUENTLY
}
