version: '3.8'

services:
  db:
    image: postgres:15-alpine
    command: postgres -c listen_addresses='*' -c password_encryption=md5
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: service_scheduler
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  migration:
    build:
      context: .
      dockerfile: Dockerfile
    command: ./scripts/migrate.sh
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/service_scheduler
      NODE_ENV: development
      MIGRATION_TIMEOUT: "300"  # 5 minutes timeout for migrations
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./prisma:/app/prisma
      - ./scripts:/app/scripts
    restart: on-failure:3

  backup:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["sh", "-c", "crond -f -d 8 && echo '0 0 * * * /app/scripts/backup.sh' | crontab -"]
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/service_scheduler
      PGPASSWORD: postgres
      BACKUP_ENCRYPTION_KEY: ${BACKUP_ENCRYPTION_KEY:-changeme}  # Should be changed in production
    volumes:
      - ./scripts:/app/scripts
      - backup_data:/backups
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/service_scheduler
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.0.3
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - grafana_data:/var/lib/grafana
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  postgres_data:
  backup_data:
  redis_data:
  prometheus_data:
  grafana_data: 