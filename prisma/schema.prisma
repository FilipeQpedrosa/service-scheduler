generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SystemSettings {
  id                  String      @id @default(cuid())
  key                 String      @unique
  value               Json
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  lastModifiedBy      String
  lastModifiedByAdmin SystemAdmin @relation(fields: [lastModifiedBy], references: [id])

  @@map("system_settings")
}

model SystemAdmin {
  id            String                 @id @default(cuid())
  email         String                 @unique
  name          String
  role          AdminRole
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  activities    AdminActivity[]
  verifications BusinessVerification[]
  settings      SystemSettings[]
  businesses    Business[]             @relation("SystemAdminToBusinesses")

  @@map("system_admins")
}

model BusinessVerification {
  id          String             @id @default(cuid())
  businessId  String             @unique
  status      VerificationStatus
  submittedAt DateTime           @default(now())
  verifiedAt  DateTime?
  verifiedBy  String?
  documents   Json?
  notes       String?
  business    Business           @relation(fields: [businessId], references: [id])
  systemAdmin SystemAdmin?       @relation(fields: [verifiedBy], references: [id])

  @@map("business_verifications")
}

model Business {
  id                   String                @id @default(cuid())
  name                 String
  type                 BusinessType
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  address              String?
  phone                String?
  email                String                @unique
  settings             Json?
  status               BusinessStatus        @default(PENDING)
  passwordHash         String
  appointments         Appointment[]
  businessHours        BusinessHours[]
  verification         BusinessVerification?
  dataAccessLogs       DataAccessLog[]
  featureConfiguration FeatureConfiguration?
  patientDataRules     PatientDataRule[]
  patientRelationships PatientRelationship[]
  securitySettings     SecuritySettings?
  categories           ServiceCategory[]
  services             Service[]
  staff                Staff[]
  staffPermissions     StaffPermission[]
  patients             Patient[]             @relation("BusinessToPatient")
  systemAdmins         SystemAdmin[]         @relation("SystemAdminToBusinesses")

  @@map("businesses")
}

model SecuritySettings {
  id                        String   @id @default(cuid())
  businessId                String   @unique
  requireMFA                Boolean  @default(false)
  sensitiveDataAccessExpiry Int?
  autoRevokeInactiveAccess  Boolean  @default(true)
  inactivityThreshold       Int      @default(30)
  enforceIPRestriction      Boolean  @default(false)
  allowedIPs                String[]
  requireAccessReason       Boolean  @default(true)
  enableAccessLogs          Boolean  @default(true)
  defaultDataRetentionDays  Int      @default(365)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  business                  Business @relation(fields: [businessId], references: [id])

  @@map("security_settings")
}

model Staff {
  id                  String                @id @default(cuid())
  email               String                @unique
  name                String
  role                StaffRole
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  businessId          String
  lastActive          DateTime?
  mfaEnabled          Boolean               @default(false)
  password            String
  appointments        Appointment[]
  accessLogs          DataAccessLog[]
  patientDataRules    PatientDataRule[]
  relationshipNotes   RelationshipNote[]
  schedules           Schedule[]
  business            Business              @relation(fields: [businessId], references: [id])
  availability        StaffAvailability[]
  permissions         StaffPermission[]
  preferredByPatients PatientRelationship[] @relation("PatientRelationshipToStaff")
  services            Service[]             @relation("ServiceToStaff")

  @@map("staff")
}

model ServiceCategory {
  id          String    @id @default(cuid())
  name        String
  description String?
  color       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id])
  services    Service[]

  @@map("service_categories")
}

model Patient {
  id                String                @id @default(cuid())
  name              String
  phone             String?
  email             String                @unique
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  status            PatientStatus         @default(ACTIVE)
  notes             String?
  address           String?
  dateOfBirth       DateTime?
  flags             PatientFlag[]
  gender            String?
  PatientToProvider PatientToProvider[]
  appointments      Appointment[]
  accessLogs        DataAccessLog[]
  dataRules         PatientDataRule[]
  preferences       PatientPreference?
  relationships     PatientRelationship?
  sensitiveInfo     PatientSensitiveInfo?
  paymentMethods    PaymentMethod[]
  reviews           Review[]
  businesses        Business[]            @relation("BusinessToPatient")

  @@map("patients")
}

model PatientSensitiveInfo {
  id               String    @id @default(cuid())
  email            String
  notes            String?
  medicalInfo      String?
  documents        Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  patientId        String    @unique
  encryptionStatus Boolean   @default(true)
  lastAccessedAt   DateTime?
  accessLog        Json?
  patient          Patient   @relation(fields: [patientId], references: [id])

  @@map("patient_sensitive_info")
}

model Service {
  id           String           @id @default(cuid())
  name         String
  description  String?
  duration     Int
  price        Decimal
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  businessId   String
  categoryId   String?
  recurring    Boolean          @default(false)
  isActive     Boolean          @default(true)
  appointments Appointment[]
  business     Business         @relation(fields: [businessId], references: [id])
  category     ServiceCategory? @relation(fields: [categoryId], references: [id])
  providers    Staff[]          @relation("ServiceToStaff")

  @@map("services")
}

model Appointment {
  id               String                   @id @default(cuid())
  startTime        DateTime
  endTime          DateTime
  status           AppointmentStatus
  notes            String?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  businessId       String
  serviceId        String
  staffId          String
  patientId        String
  bufferTimeAfter  Int                      @default(0)
  bufferTimeBefore Int                      @default(0)
  recurringId      String?
  cancellation     AppointmentCancellation?
  reminders        AppointmentReminder[]
  business         Business                 @relation(fields: [businessId], references: [id])
  patient          Patient                  @relation(fields: [patientId], references: [id])
  recurringPattern RecurringAppointment?    @relation(fields: [recurringId], references: [id])
  service          Service                  @relation(fields: [serviceId], references: [id])
  staff            Staff                    @relation(fields: [staffId], references: [id])
  payment          Payment?
  review           Review?

  @@map("appointments")
}

model AppointmentReminder {
  id            String      @id @default(cuid())
  appointmentId String
  type          String
  sentAt        DateTime    @default(now())
  status        String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])

  @@map("appointment_reminders")
}

model AppointmentCancellation {
  id            String      @id @default(cuid())
  appointmentId String      @unique
  reason        String?
  cancelledBy   String
  cancelledAt   DateTime    @default(now())
  appointment   Appointment @relation(fields: [appointmentId], references: [id])

  @@map("appointment_cancellations")
}

model Payment {
  id            String            @id @default(cuid())
  amount        Decimal
  status        PaymentStatus
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  appointmentId String            @unique
  paymentMethod PaymentMethodType
  appointment   Appointment       @relation(fields: [appointmentId], references: [id])

  @@map("payments")
}

model Schedule {
  id        String @id @default(cuid())
  dayOfWeek Int
  startTime String
  endTime   String
  staffId   String
  staff     Staff  @relation(fields: [staffId], references: [id])

  @@map("schedules")
}

model BusinessHours {
  id         String   @id @default(cuid())
  dayOfWeek  Int
  startTime  String
  endTime    String
  isClosed   Boolean  @default(false)
  businessId String
  business   Business @relation(fields: [businessId], references: [id])

  @@map("business_hours")
}

model PatientRelationship {
  id                    String             @id @default(cuid())
  patientId             String             @unique
  businessId            String
  status                PatientStatus      @default(ACTIVE)
  relationshipStartDate DateTime           @default(now())
  lastVisit             DateTime?
  visitFrequency        Int?
  lifetimeValue         Decimal?
  preferences           Json?
  internalNotes         String?
  flags                 PatientFlag[]
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  business              Business           @relation(fields: [businessId], references: [id])
  patient               Patient            @relation(fields: [patientId], references: [id])
  noteHistory           RelationshipNote[]
  visitHistory          VisitHistory[]
  preferredStaff        Staff[]            @relation("PatientRelationshipToStaff")

  @@map("patient_relationships")
}

model VisitHistory {
  id                  String              @id @default(cuid())
  relationshipId      String
  visitDate           DateTime
  serviceType         String
  staffNotes          String?
  followUpRequired    Boolean             @default(false)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  patientFeedback     String?
  patientRelationship PatientRelationship @relation(fields: [relationshipId], references: [id])

  @@map("visit_history")
}

model RelationshipNote {
  id                  String              @id @default(cuid())
  relationshipId      String
  noteType            NoteType
  content             String
  createdById         String
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  createdBy           Staff               @relation(fields: [createdById], references: [id])
  patientRelationship PatientRelationship @relation(fields: [relationshipId], references: [id])

  @@map("relationship_notes")
}

model StaffPermission {
  id          String      @id @default(cuid())
  staffId     String
  businessId  String
  resource    String
  accessLevel AccessLevel
  conditions  Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  expiresAt   DateTime?
  business    Business    @relation(fields: [businessId], references: [id])
  staff       Staff       @relation(fields: [staffId], references: [id])

  @@unique([staffId, resource])
  @@map("staff_permissions")
}

model DataAccessLog {
  id         String         @id @default(cuid())
  businessId String
  staffId    String
  accessType DataAccessType
  resource   String
  reason     String
  ipAddress  String?
  userAgent  String?
  successful Boolean
  timestamp  DateTime       @default(now())
  patientId  String
  business   Business       @relation(fields: [businessId], references: [id])
  patient    Patient        @relation(fields: [patientId], references: [id])
  staff      Staff          @relation(fields: [staffId], references: [id])

  @@map("data_access_logs")
}

model PatientDataRule {
  id          String      @id @default(cuid())
  businessId  String
  patientId   String
  staffId     String?
  resource    String
  accessLevel AccessLevel
  startDate   DateTime    @default(now())
  endDate     DateTime?
  reason      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  business    Business    @relation(fields: [businessId], references: [id])
  patient     Patient     @relation(fields: [patientId], references: [id])
  staff       Staff?      @relation(fields: [staffId], references: [id])

  @@map("patient_data_rules")
}

model Provider {
  id                String              @id @default(cuid())
  name              String
  email             String              @unique
  PatientToProvider PatientToProvider[]
}

model FeatureConfiguration {
  id         String    @id @default(cuid())
  businessId String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  business   Business  @relation(fields: [businessId], references: [id])
  features   Feature[]

  @@map("feature_configurations")
}

model Feature {
  id               String               @id @default(cuid())
  key              String
  name             String
  description      String?
  enabled          Boolean              @default(true)
  requiresApproval Boolean              @default(false)
  configurationId  String
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  options          FeatureOption[]
  configuration    FeatureConfiguration @relation(fields: [configurationId], references: [id])

  @@unique([configurationId, key])
  @@map("features")
}

model FeatureOption {
  id        String   @id @default(cuid())
  key       String
  name      String
  enabled   Boolean  @default(true)
  featureId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  feature   Feature  @relation(fields: [featureId], references: [id])

  @@unique([featureId, key])
  @@map("feature_options")
}

model StaffAvailability {
  id          String   @id @default(cuid())
  staffId     String
  date        DateTime
  startTime   String
  endTime     String
  isAvailable Boolean  @default(true)
  reason      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  staff       Staff    @relation(fields: [staffId], references: [id])

  @@map("staff_availability")
}

model Review {
  id            String      @id @default(cuid())
  rating        Int
  comment       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  appointmentId String      @unique
  patientId     String
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  patient       Patient     @relation(fields: [patientId], references: [id])

  @@map("reviews")
}

model PatientPreference {
  id                 String   @id @default(cuid())
  patientId          String   @unique
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  reminderTime       Int      @default(24)
  marketingEmails    Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  patient            Patient  @relation(fields: [patientId], references: [id])

  @@map("patient_preferences")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String
  message   String
  read      Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  metadata  Json?

  @@map("notifications")
}

model PaymentMethod {
  id        String   @id @default(cuid())
  type      String
  details   Json
  isDefault Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  patientId String
  patient   Patient  @relation(fields: [patientId], references: [id])

  @@map("payment_methods")
}

model AdminActivity {
  id        String      @id @default(cuid())
  adminId   String
  action    String
  details   Json?
  createdAt DateTime    @default(now())
  admin     SystemAdmin @relation(fields: [adminId], references: [id])

  @@map("admin_activities")
}

model RecurringAppointment {
  id           String             @id @default(cuid())
  frequency    RecurringFrequency
  interval     Int
  daysOfWeek   Int[]
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  appointments Appointment[]

  @@map("recurring_appointments")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model PatientToProvider {
  A        String
  B        String
  patients Patient  @relation(fields: [A], references: [id], onDelete: Cascade)
  Provider Provider @relation(fields: [B], references: [id], onDelete: Cascade)

  @@unique([A, B], map: "_PatientToProvider_AB_unique")
  @@index([B], map: "_PatientToProvider_B_index")
  @@map("_PatientToProvider")
}

enum BusinessType {
  HAIR_SALON
  BARBERSHOP
  NAIL_SALON
  PHYSIOTHERAPY
  PSYCHOLOGY
  OTHER
}

enum StaffRole {
  OWNER
  ADMIN
  PROVIDER
  RECEPTIONIST
  ASSISTANT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
  RESCHEDULED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  TRANSFER
}

enum PatientStatus {
  PENDING
  ACTIVE
  INACTIVE
  VIP
  BLOCKED
}

enum NoteType {
  GENERAL
  PREFERENCE
  INCIDENT
  FEEDBACK
  FOLLOW_UP
  SPECIAL_REQUEST
}

enum PatientFlag {
  ALLERGIES
  MEDICAL_CONDITION
  PAYMENT_ISSUES
  SPECIAL_CARE
  VIP_TREATMENT
  CANCELLED_FREQUENTLY
  RESCHEDULE_FREQUENTLY
}

enum AccessLevel {
  FULL
  RESTRICTED
  BASIC
  NONE
}

enum DataAccessType {
  VIEW
  EDIT
  EXPORT
  DELETE
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  SUPPORT
}

enum VerificationStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
}

enum BusinessStatus {
  PENDING
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum RecurringFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}
