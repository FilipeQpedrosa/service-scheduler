generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BaseModel {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@map("base_model")
}

model SystemSettings {
  id                  String      @id @default(cuid())
  key                 String      @unique
  value               Json
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  lastModifiedBy      String
  isDeleted           Boolean     @default(false)
  lastModifiedByAdmin SystemAdmin @relation(fields: [lastModifiedBy], references: [id])

  @@index([key])
  @@map("system_settings")
}

model SystemAdmin {
  id            String                 @id @default(cuid())
  email         String                 @unique
  name          String
  role          AdminRole
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  isDeleted     Boolean                @default(false)
  activities    AdminActivity[]
  verifications BusinessVerification[]
  settings      SystemSettings[]
  businesses    Business[]             @relation("SystemAdminToBusinesses")

  @@index([email])
  @@map("system_admins")
}

model BusinessVerification {
  id          String             @id @default(cuid())
  businessId  String             @unique
  status      VerificationStatus
  submittedAt DateTime           @default(now())
  verifiedAt  DateTime?
  verifiedBy  String?
  documents   Json?
  notes       String?
  isDeleted   Boolean            @default(false)
  business    Business           @relation(fields: [businessId], references: [id])
  systemAdmin SystemAdmin?       @relation(fields: [verifiedBy], references: [id])

  @@index([businessId])
  @@index([status])
  @@map("business_verifications")
}

model Business {
  id                   String                @id @default(cuid())
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  name                 String
  email                String                @unique
  phone                String?
  address              String?
  website              String?
  description          String?
  logo                 String?
  settings             Json?
  type                 BusinessType          @default(HAIR_SALON)
  passwordHash         String
  appointments         Appointment[]
  clients              Client[]
  services             Service[]
  staff                Staff[]
  verification         BusinessVerification?
  dataAccessLogs       DataAccessLog[]
  featureConfiguration FeatureConfiguration?
  securitySettings     SecuritySettings?
  serviceCategories    ServiceCategory[]
  staffPermissions     StaffPermission[]
  systemAdmins         SystemAdmin[]         @relation("SystemAdminToBusinesses")
  visitHistory         VisitHistory[]
  relationshipNotes    RelationshipNote[]

  @@index([email])
}

model SecuritySettings {
  id                        String   @id @default(cuid())
  businessId                String   @unique
  requireMFA                Boolean  @default(false)
  sensitiveDataAccessExpiry Int?
  autoRevokeInactiveAccess  Boolean  @default(true)
  inactivityThreshold       Int      @default(30)
  enforceIPRestriction      Boolean  @default(false)
  allowedIPs                String[]
  requireAccessReason       Boolean  @default(true)
  enableAccessLogs          Boolean  @default(true)
  defaultDataRetentionDays  Int      @default(365)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  isDeleted                 Boolean  @default(false)
  business                  Business @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@map("security_settings")
}

model Staff {
  id                         String                       @id @default(cuid())
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  name                       String
  email                      String                       @unique
  phone                      String?
  password                   String
  role                       StaffRole                    @default(STANDARD)
  businessId                 String
  appointments               Appointment[]
  business                   Business                     @relation(fields: [businessId], references: [id])
  availability               StaffAvailability?
  dataAccessLogs             DataAccessLog[]
  relationshipNotes          RelationshipNote[]
  permissions                StaffPermission[]
  services                   Service[]                    @relation("StaffServices")

  @@index([businessId])
  @@index([email])
}

model Service {
  id           String           @id @default(cuid())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  name         String
  description  String?
  duration     Int
  price        Float
  businessId   String
  categoryId   String?
  appointments Appointment[]
  business     Business         @relation(fields: [businessId], references: [id])
  category     ServiceCategory? @relation(fields: [categoryId], references: [id])
  staff        Staff[]          @relation("StaffServices")

  @@index([businessId])
  @@index([categoryId])
}

model Client {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  name              String
  email             String             @unique
  phone             String?
  businessId        String
  preferences       Json?
  status            String?            @default("ACTIVE")
  notes             String?
  lastVisit         DateTime?
  isDeleted         Boolean            @default(false)
  appointments      Appointment[]
  business          Business           @relation(fields: [businessId], references: [id])
  visitHistory      VisitHistory[]
  relationshipNotes RelationshipNote[]
  reviews           Review[]
  paymentMethods    PaymentMethod[]

  @@index([businessId])
  @@index([email])
  @@index([status])
  @@index([isDeleted])
  @@index([lastVisit])
}

model ServiceCategory {
  id             String    @id @default(cuid())
  name           String
  description    String?
  color          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isDeleted      Boolean   @default(false)
  createdBy      String?
  lastModifiedBy String?
  businessId     String
  services       Service[]
  business       Business  @relation(fields: [businessId], references: [id])

  @@index([businessId])
  @@index([isDeleted])
  @@index([createdBy])
  @@index([lastModifiedBy])
  @@map("service_categories")
}

model VisitHistory {
  id            String   @id @default(cuid())
  visitDate     DateTime
  serviceType   String
  staffNotes    String?
  clientFeedback String?
  followUpRequired Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  businessId    String
  clientId      String
  business      Business @relation(fields: [businessId], references: [id])
  client        Client   @relation(fields: [clientId], references: [id])

  @@map("visit_history")
}

model RelationshipNote {
  id          String   @id @default(cuid())
  noteType    NoteType
  content     String
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  businessId  String
  clientId    String
  createdBy   Staff    @relation(fields: [createdById], references: [id])
  business    Business @relation(fields: [businessId], references: [id])
  client      Client   @relation(fields: [clientId], references: [id])

  @@map("relationship_notes")
}

model StaffPermission {
  id          String      @id @default(cuid())
  staffId     String
  businessId  String
  resource    String
  accessLevel AccessLevel
  conditions  Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  expiresAt   DateTime?
  business    Business    @relation(fields: [businessId], references: [id])
  staff       Staff       @relation(fields: [staffId], references: [id])

  @@unique([staffId, resource])
  @@map("staff_permissions")
}

model DataAccessLog {
  id         String         @id @default(cuid())
  businessId String
  staffId    String
  accessType DataAccessType
  resource   String
  reason     String
  ipAddress  String?
  userAgent  String?
  successful Boolean
  timestamp  DateTime       @default(now())
  business   Business       @relation(fields: [businessId], references: [id])
  staff      Staff         @relation(fields: [staffId], references: [id])

  @@map("data_access_logs")
}

model Provider {
  id    String @id @default(cuid())
  name  String
  email String @unique
}

model FeatureConfiguration {
  id         String    @id @default(cuid())
  businessId String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  business   Business  @relation(fields: [businessId], references: [id])
  features   Feature[]

  @@map("feature_configurations")
}

model Feature {
  id               String               @id @default(cuid())
  key              String
  name             String
  description      String?
  enabled          Boolean              @default(true)
  requiresApproval Boolean              @default(false)
  configurationId  String
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  options          FeatureOption[]
  configuration    FeatureConfiguration @relation(fields: [configurationId], references: [id])

  @@unique([configurationId, key])
  @@map("features")
}

model FeatureOption {
  id        String   @id @default(cuid())
  key       String
  name      String
  enabled   Boolean  @default(true)
  featureId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  feature   Feature  @relation(fields: [featureId], references: [id])

  @@unique([featureId, key])
  @@map("feature_options")
}

model StaffAvailability {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  staffId   String   @unique
  schedule  Json     @default("{}")
  staff     Staff    @relation(fields: [staffId], references: [id])

  @@index([staffId])
}

model Review {
  id            String      @id @default(cuid())
  rating        Int
  comment       String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  clientId      String
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  client        Client      @relation(fields: [clientId], references: [id])

  @@map("reviews")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  type      String
  message   String
  read      Boolean   @default(false)
  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  metadata  Json?

  @@map("notifications")
}

model PaymentMethod {
  id        String   @id @default(cuid())
  clientId  String
  type      String
  details   Json
  isDefault Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client   @relation(fields: [clientId], references: [id])

  @@map("payment_methods")
}

model AdminActivity {
  id        String      @id @default(cuid())
  adminId   String
  action    String
  details   Json?
  createdAt DateTime    @default(now())
  admin     SystemAdmin @relation(fields: [adminId], references: [id])

  @@map("admin_activities")
}

model RecurringAppointment {
  id           String             @id @default(cuid())
  frequency    RecurringFrequency
  interval     Int
  daysOfWeek   Int[]
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  appointments Appointment[]

  @@map("recurring_appointments")
}

model BackupStatus {
  id        String   @id @default(cuid())
  status    String
  timestamp DateTime @default(now())
  details   String?
  filename  String
  checksum  String?
  size      BigInt?
  duration  Int?

  @@index([status])
  @@index([timestamp])
  @@map("backup_status")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Appointment {
  id                     String                @id @default(cuid())
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  scheduledFor           DateTime
  duration               Int
  status                 AppointmentStatus     @default(PENDING)
  notes                  String?
  staffId                String
  clientId               String
  serviceId              String
  businessId             String
  recurringAppointmentId String?
  business               Business              @relation(fields: [businessId], references: [id])
  client                 Client                @relation(fields: [clientId], references: [id])
  recurringAppointment   RecurringAppointment? @relation(fields: [recurringAppointmentId], references: [id])
  service                Service               @relation(fields: [serviceId], references: [id])
  staff                  Staff                 @relation(fields: [staffId], references: [id])
  review                 Review?

  @@index([staffId])
  @@index([clientId])
  @@index([serviceId])
  @@index([businessId])
  @@index([recurringAppointmentId])
  @@map("appointments")
}

enum BusinessType {
  HAIR_SALON
  BARBERSHOP
  NAIL_SALON
  PHYSIOTHERAPY
  PSYCHOLOGY
  OTHER
}

enum StaffRole {
  ADMIN
  MANAGER
  STANDARD
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  TRANSFER
}

enum NoteType {
  GENERAL
  PREFERENCE
  INCIDENT
  FEEDBACK
  FOLLOW_UP
  SPECIAL_REQUEST
}

enum AccessLevel {
  FULL
  RESTRICTED
  BASIC
  NONE
}

enum DataAccessType {
  VIEW
  EDIT
  EXPORT
  DELETE
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  SUPPORT
}

enum VerificationStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
}

enum BusinessStatus {
  PENDING
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum RecurringFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}
